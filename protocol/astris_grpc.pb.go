// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AstrisV1Client is the client API for AstrisV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AstrisV1Client interface {
	// this is for announcing and managing peers.
	PeerExchange(ctx context.Context, in *Peer, opts ...grpc.CallOption) (AstrisV1_PeerExchangeClient, error)
	// this is the connection we open to receive blocks
	// we only have a receive function. If other peers
	// want blocks from us, they must call RecieveBlocks
	// to open the channel
	// the client should immediately send it's current "HEAD"
	// block header, from which the client can decide whether
	// to ask for more blocks, or ignore this peer
	RecvBlocks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (AstrisV1_RecvBlocksClient, error)
	// recieve a specific block from the peer, if they have it
	// this can be used to populate your chain
	// addressed.
	GetBlock(ctx context.Context, in *BlockID, opts ...grpc.CallOption) (*FullBlock, error)
	// this can be used to fetch a stream of blocks starting at the given one
	// if the peer doesn't recognise the starting block, it should bail.
	// if the client doesn't recieve a valid ordered sequence of blocks,
	// it should bail. This is used to "fast-forward" a client.
	FromBlock(ctx context.Context, in *BlockID, opts ...grpc.CallOption) (AstrisV1_FromBlockClient, error)
	// This method is used to find the largest depth common block
	// between two divergent chains
	AtDepth(ctx context.Context, in *Depth, opts ...grpc.CallOption) (*BlockID, error)
	// Publish a block onto the chain, to allow us to "push" blocks to a node we have connected to
	// If they have connected to us, we can just use their RecvBlocks to deliver. This is designed
	// for the clients that wish to connect and publish rather than participate in the full mesh
	PublishBlock(ctx context.Context, in *FullBlock, opts ...grpc.CallOption) (*Acceptance, error)
}

type astrisV1Client struct {
	cc grpc.ClientConnInterface
}

func NewAstrisV1Client(cc grpc.ClientConnInterface) AstrisV1Client {
	return &astrisV1Client{cc}
}

func (c *astrisV1Client) PeerExchange(ctx context.Context, in *Peer, opts ...grpc.CallOption) (AstrisV1_PeerExchangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AstrisV1_serviceDesc.Streams[0], "/astris.AstrisV1/PeerExchange", opts...)
	if err != nil {
		return nil, err
	}
	x := &astrisV1PeerExchangeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AstrisV1_PeerExchangeClient interface {
	Recv() (*Peer, error)
	grpc.ClientStream
}

type astrisV1PeerExchangeClient struct {
	grpc.ClientStream
}

func (x *astrisV1PeerExchangeClient) Recv() (*Peer, error) {
	m := new(Peer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *astrisV1Client) RecvBlocks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (AstrisV1_RecvBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AstrisV1_serviceDesc.Streams[1], "/astris.AstrisV1/RecvBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &astrisV1RecvBlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AstrisV1_RecvBlocksClient interface {
	Recv() (*BlockHeader, error)
	grpc.ClientStream
}

type astrisV1RecvBlocksClient struct {
	grpc.ClientStream
}

func (x *astrisV1RecvBlocksClient) Recv() (*BlockHeader, error) {
	m := new(BlockHeader)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *astrisV1Client) GetBlock(ctx context.Context, in *BlockID, opts ...grpc.CallOption) (*FullBlock, error) {
	out := new(FullBlock)
	err := c.cc.Invoke(ctx, "/astris.AstrisV1/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *astrisV1Client) FromBlock(ctx context.Context, in *BlockID, opts ...grpc.CallOption) (AstrisV1_FromBlockClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AstrisV1_serviceDesc.Streams[2], "/astris.AstrisV1/FromBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &astrisV1FromBlockClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AstrisV1_FromBlockClient interface {
	Recv() (*FullBlock, error)
	grpc.ClientStream
}

type astrisV1FromBlockClient struct {
	grpc.ClientStream
}

func (x *astrisV1FromBlockClient) Recv() (*FullBlock, error) {
	m := new(FullBlock)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *astrisV1Client) AtDepth(ctx context.Context, in *Depth, opts ...grpc.CallOption) (*BlockID, error) {
	out := new(BlockID)
	err := c.cc.Invoke(ctx, "/astris.AstrisV1/AtDepth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *astrisV1Client) PublishBlock(ctx context.Context, in *FullBlock, opts ...grpc.CallOption) (*Acceptance, error) {
	out := new(Acceptance)
	err := c.cc.Invoke(ctx, "/astris.AstrisV1/PublishBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AstrisV1Server is the server API for AstrisV1 service.
// All implementations must embed UnimplementedAstrisV1Server
// for forward compatibility
type AstrisV1Server interface {
	// this is for announcing and managing peers.
	PeerExchange(*Peer, AstrisV1_PeerExchangeServer) error
	// this is the connection we open to receive blocks
	// we only have a receive function. If other peers
	// want blocks from us, they must call RecieveBlocks
	// to open the channel
	// the client should immediately send it's current "HEAD"
	// block header, from which the client can decide whether
	// to ask for more blocks, or ignore this peer
	RecvBlocks(*Empty, AstrisV1_RecvBlocksServer) error
	// recieve a specific block from the peer, if they have it
	// this can be used to populate your chain
	// addressed.
	GetBlock(context.Context, *BlockID) (*FullBlock, error)
	// this can be used to fetch a stream of blocks starting at the given one
	// if the peer doesn't recognise the starting block, it should bail.
	// if the client doesn't recieve a valid ordered sequence of blocks,
	// it should bail. This is used to "fast-forward" a client.
	FromBlock(*BlockID, AstrisV1_FromBlockServer) error
	// This method is used to find the largest depth common block
	// between two divergent chains
	AtDepth(context.Context, *Depth) (*BlockID, error)
	// Publish a block onto the chain, to allow us to "push" blocks to a node we have connected to
	// If they have connected to us, we can just use their RecvBlocks to deliver. This is designed
	// for the clients that wish to connect and publish rather than participate in the full mesh
	PublishBlock(context.Context, *FullBlock) (*Acceptance, error)
	mustEmbedUnimplementedAstrisV1Server()
}

// UnimplementedAstrisV1Server must be embedded to have forward compatible implementations.
type UnimplementedAstrisV1Server struct {
}

func (UnimplementedAstrisV1Server) PeerExchange(*Peer, AstrisV1_PeerExchangeServer) error {
	return status.Errorf(codes.Unimplemented, "method PeerExchange not implemented")
}
func (UnimplementedAstrisV1Server) RecvBlocks(*Empty, AstrisV1_RecvBlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method RecvBlocks not implemented")
}
func (UnimplementedAstrisV1Server) GetBlock(context.Context, *BlockID) (*FullBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (UnimplementedAstrisV1Server) FromBlock(*BlockID, AstrisV1_FromBlockServer) error {
	return status.Errorf(codes.Unimplemented, "method FromBlock not implemented")
}
func (UnimplementedAstrisV1Server) AtDepth(context.Context, *Depth) (*BlockID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AtDepth not implemented")
}
func (UnimplementedAstrisV1Server) PublishBlock(context.Context, *FullBlock) (*Acceptance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishBlock not implemented")
}
func (UnimplementedAstrisV1Server) mustEmbedUnimplementedAstrisV1Server() {}

// UnsafeAstrisV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AstrisV1Server will
// result in compilation errors.
type UnsafeAstrisV1Server interface {
	mustEmbedUnimplementedAstrisV1Server()
}

func RegisterAstrisV1Server(s grpc.ServiceRegistrar, srv AstrisV1Server) {
	s.RegisterService(&_AstrisV1_serviceDesc, srv)
}

func _AstrisV1_PeerExchange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Peer)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AstrisV1Server).PeerExchange(m, &astrisV1PeerExchangeServer{stream})
}

type AstrisV1_PeerExchangeServer interface {
	Send(*Peer) error
	grpc.ServerStream
}

type astrisV1PeerExchangeServer struct {
	grpc.ServerStream
}

func (x *astrisV1PeerExchangeServer) Send(m *Peer) error {
	return x.ServerStream.SendMsg(m)
}

func _AstrisV1_RecvBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AstrisV1Server).RecvBlocks(m, &astrisV1RecvBlocksServer{stream})
}

type AstrisV1_RecvBlocksServer interface {
	Send(*BlockHeader) error
	grpc.ServerStream
}

type astrisV1RecvBlocksServer struct {
	grpc.ServerStream
}

func (x *astrisV1RecvBlocksServer) Send(m *BlockHeader) error {
	return x.ServerStream.SendMsg(m)
}

func _AstrisV1_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AstrisV1Server).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/astris.AstrisV1/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AstrisV1Server).GetBlock(ctx, req.(*BlockID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AstrisV1_FromBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlockID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AstrisV1Server).FromBlock(m, &astrisV1FromBlockServer{stream})
}

type AstrisV1_FromBlockServer interface {
	Send(*FullBlock) error
	grpc.ServerStream
}

type astrisV1FromBlockServer struct {
	grpc.ServerStream
}

func (x *astrisV1FromBlockServer) Send(m *FullBlock) error {
	return x.ServerStream.SendMsg(m)
}

func _AstrisV1_AtDepth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Depth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AstrisV1Server).AtDepth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/astris.AstrisV1/AtDepth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AstrisV1Server).AtDepth(ctx, req.(*Depth))
	}
	return interceptor(ctx, in, info, handler)
}

func _AstrisV1_PublishBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FullBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AstrisV1Server).PublishBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/astris.AstrisV1/PublishBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AstrisV1Server).PublishBlock(ctx, req.(*FullBlock))
	}
	return interceptor(ctx, in, info, handler)
}

var _AstrisV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "astris.AstrisV1",
	HandlerType: (*AstrisV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlock",
			Handler:    _AstrisV1_GetBlock_Handler,
		},
		{
			MethodName: "AtDepth",
			Handler:    _AstrisV1_AtDepth_Handler,
		},
		{
			MethodName: "PublishBlock",
			Handler:    _AstrisV1_PublishBlock_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PeerExchange",
			Handler:       _AstrisV1_PeerExchange_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RecvBlocks",
			Handler:       _AstrisV1_RecvBlocks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FromBlock",
			Handler:       _AstrisV1_FromBlock_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protocol/astris.proto",
}
